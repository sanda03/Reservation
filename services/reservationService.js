const { differenceInDays } = require('date-fns');

class ReservationService {
    constructor() {
        this.reservationMap = new Map();
        this.reservationId = 1; // Pour g√©n√©rer des identifiants uniques
    }

    // V√©rification de la disponibilit√© avanc√©e
    isAvailable(item, startTime, endTime) {
        for (const reservation of this.reservationMap.values()) {
            if (reservation.item.getName() === item.getName()) {
                if (!(reservation.endTime <= startTime || reservation.startTime >= endTime)) {
                    return false;
                }
            }
        }
        return true;
    }

    // Calcul du nombre de jours
    calculateDays(startTime, endTime) {
        const days = differenceInDays(endTime, startTime);
        return days === 0 ? 1 : days + 1;
    }

    // R√©servation d'un item
    reserveItem(item, startTime, endTime) {
        const days = this.calculateDays(startTime, endTime);
        console.log(`Dur√©e calcul√©e : ${days} jour(s)`);

        if (!this.isAvailable(item, startTime, endTime)) {
            console.log(`L'item ${item.getName()} est d√©j√† r√©serv√© pendant cette p√©riode.`);
            return false;
        }

        // Cr√©er une r√©servation avec un identifiant unique
        const reservation = {
            id: this.reservationId++, // Incr√©mentation de l'ID
            item,
            startTime,
            endTime,
            days
        };

        this.reservationMap.set(reservation.id, reservation);
        item.setReserved(true);
        console.log(`‚úÖ R√©servation effectu√©e : ${item.getName()} du ${startTime} au ${endTime} (Dur√©e: ${days} jour(s))`);
        return true;
    }

    // Liste des r√©servations
    listReservations() {
        if (this.reservationMap.size === 0) {
            console.log("üö´ Aucune r√©servation n'a √©t√© trouv√©e.");
            return;
        }

        console.log("\nüìã Liste des r√©servations :");
        for (const reservation of this.reservationMap.values()) {
            console.log(`üîπ R√©servation ID ${reservation.id} - ${reservation.item.getName()} du ${reservation.startTime} au ${reservation.endTime} (Dur√©e: ${reservation.days} jour(s))`);
        }
    }

    // Annuler une r√©servation
    cancelReservation(id) {
        if (this.reservationMap.has(id)) {
            const reservation = this.reservationMap.get(id);
            reservation.item.setReserved(false);
            this.reservationMap.delete(id);
            console.log(`‚ùå R√©servation annul√©e pour : ${reservation.item.getName()} (ID ${id})`);
        } else {
            console.log(`‚ö†Ô∏è Aucune r√©servation trouv√©e avec l'ID ${id}`);
        }
    }
}

module.exports = ReservationService;
